version: '3'

services:
  db:
    container_name: postgis
    hostname: postgis
    image: postgis
    build:
      context: ./db
      dockerfile: Dockerfile
    env_file:
      - ./db/.env

    volumes:
      - postgis:/var/lib/postgis/data
    ports:
      - "5432:5432"

  data-pipeline:
    image: data-pipeline
    container_name: data-pipeline
    build: 
      context: ./  # Build context is the current directory
      dockerfile: Dockerfile
    command: ["python3", "main.py"]  # Command to run your Python script
    depends_on:
      - db
    
  metabase-backend:
    image: metabase-backend
    container_name: metabase-backend
    build: 
      context: ./metabase/backend
      dockerfile: Dockerfile
    env_file:
      - ./metabase/backend/.env
    volumes: 
      - metabase-backend:/var/lib/postgresql/data
    ports:
      - "1132:5432"
  
  metabase:
    image: metabase
    container_name: metabase
    build:
      context: ./metabase
      dockerfile: Dockerfile
    volumes:
      - metabase:/metabase-data
    ports:
      - "3000:3000"
    env_file:
      ./metabase/.env
    depends_on:
      - metabase-backend
    
  init-metabase-questions:
    image: data-pipeline # This is the name of the image we built in the 1st step
    container_name: init-metabase-questions
    build: 
      context: ./  # Build context is the current directory
      dockerfile: Dockerfile
    # Need this such that the import statement `from db.utils import init_metabase_db_connection` works inside the container
    environment:
      - PYTHONPATH=/app
    command: ["python3", "./metabase-api/main.py"]
    depends_on:
      - metabase-backend
    # Restart the container if it fails, but only try 3 times
    restart: on-failure:3


volumes:
  postgis:
    name: postgis
  metabase-backend:
    name: metabase-backend
  metabase:
    name: metabase